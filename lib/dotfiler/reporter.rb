# frozen_string_literal: true

module Dotfiler
  # A single event reported during execution.
  # @see Reporter
  Event = Struct.new('Event', :op, :item)

  # A reporter collects {Event}s generated by tasks.
  # This allows to process and report on the progress of tasks execution.
  class Reporter
    def initialize
      @events = []
    end

    # Returns events that have been reported to the {Reporter}
    # @param [Symbol] op if not nil then returns only events that match a given op
    # @example Return all events
    #   Reporter.new.events
    # @example Return just :sync events
    #   Reporter.new.events :sync
    def events(op = nil)
      if op.nil? then @events
      else @events.select { |event| event.op == op }
      end
    end

    # Records the start of an event
    # @param op [Symbol] the type of an operation that just started.
    # @param item [Task] the task that started the operation.
    # @return [Reporter] returns itself to allow combining of events.
    def start(op, item = nil)
      @events << Event.new(op, item)
      self
    end

    # Records the end of an event
    # @param op [Symbol] the type of an operation that just started.
    # @param item [Task] the task that started the operation.
    # @return (see #start)
    def end(op, item) # rubocop:disable Lint/UnusedMethodArgument
      self
    end
  end

  # A reporter that logs a message at the start of each event.
  # As a result it logs the progress of task's execution.
  class LoggerReporter < Reporter
    def initialize(logger)
      super()
      @logger = logger
      @ops = { sync: 'Syncing' }
    end

    # Records the start of an event. If the item that generated the event
    # has a description ({Tasks::Task#description}) logs a message about an event.
    # @param (see Reporter#start)
    # @return (see Reporter#start)
    def start(op, item = nil)
      super
      op_name = @ops[op]
      return if op_name.nil? || item.description.nil?
      message = if item.children? then "#{op_name} #{item.description}:"
                else "#{op_name} #{item.description}"
                end

      @logger.info message
      self
    end
  end
end
